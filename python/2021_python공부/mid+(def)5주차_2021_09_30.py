# -*- coding: utf-8 -*-
"""mid+(def)5주차_2021-09-30.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mCd4pXZnnn80xtRkHYdtUq9pZQLvUUgO

# 함수
"""

def print_star():
  print('*********')

print_star()

# Commented out IPython magic to ensure Python compatibility.
# %run ex

import ex
ex.print_star()

def print_hello(n):
  print('Hello \n'* n)

print_hello(5)

# 매개변수를 사용한 인자 값의 합계
def printSum(a,b):
  result = a+b
  print('{}와 {}의 값은 {}입니다.'.format(a,b,result))

printSum(4,5)

def getSum(a,b):
  return a + b

result = getSum(1,4)
print('두 수의 합', result)
print('두 수의 합', getSum(1,5))

# 2차 방정식 근을 구하는 공식
def print_root(a,b,c):
  r1 =  (-b + (b ** 2 - 4*a*c) ** 0.5 ) / 2 * a
  r2 =  (-b - (b ** 2 - 4*a*c) ** 0.5 ) / 2 * a
  print("해는 {} 또는 {} 이다.".format(r1,r2))
  
print_root(1,2,-8)

#키워드 인자 사용
print_root(a = 1,c = 2,b = -8)
#print_root(a = 1,c = 2, -8) #error 키워드 인자 쓰려면 모두 명시해야 함.

# 2차 방정식 근을 구하는 공식
# return 해서 tuple로 값 받지 않으면 오류
def print_root(a,b,c):
  r1 =  (-b + (b ** 2 - 4*a*c) ** 0.5 ) / 2 * a
  r2 =  (-b - (b ** 2 - 4*a*c) ** 0.5 ) / 2 * a
  # print("해는 {} 또는 {} 이다.".format(r1,r2))

result1, result2 = print_root(1,2,-8)
print('해는', result1, "또는", result2)

# 2차 방정식 근을 구하는 공식
def get_root(a,b,c):
  r1 =  (-b + (b ** 2 - 4*a*c) ** 0.5 ) / 2 * a
  r2 =  (-b - (b ** 2 - 4*a*c) ** 0.5 ) / 2 * a
  return r1, r2
# 두 개의 값을 튜플로 반환, 전달 
result1, result2 = get_root(1,2,-8)
print("해는", result1, "또는", result2)

# 함수 외부에서 정의된 값을 함수 내부에서 변경하는 경우
def PSum():
  a = 100
  b = 200
  result = a + b
  print("{}와 {}의 값은 {}입니다.".format(a,b,result))

PSum()

a = 3
b = 5
result = a + b
print(result)

# 가변적 인자 전달 (str)
def greet(*names):
  for name in names:
    print("안녕하세요", name,"씨")

greet("Esther", "Jennifer", "Kelly")
greet("삼성", "엘지")

# 가변적 인자 전달 (int)
def sum_sums(*numbers):
  result = 0
  for i in numbers:
    result += i
  return result
  
sum_sums(10,20,30,40,50)

# 재귀함수를 이용한 팩토리얼
def fact(n):
  if n <= 1:
    return 1
  else:
    return n * fact(n-1)

n = 5
print('{}! = {}'.format(n, fact(5)))

# 재귀함수를 이용한 합계
def sum(n):
  if n <= 0:
    return 0 
  else:
    return n + sum(n-1)

sum(5)

# 입력함수
num1, num2,num3 = input("정수를 입력하세요"). split()
num1 , num2, num3 = int(num1), int(num2), int(num3)
num1, num2, num3

'{0:10.3f}'.format(4.134235)

# 실수 표현을 위한 포매팅에서 소수점
# 소수점 아래 출력만 지정
print('1/3은 {:.3f}'.format(1/3))

# 1000 단위 쉼표 출력 방법
print('{:,}'.format(123456789))



import numpy as np
lst = [[1,2,3],[4,5,6],[7,8,9]]
arr = np.array(lst)
a = arr[0:2,0:2]
b = arr[1:,1:]
print(a+b)

k = [1,3,5,2,0,5,-1,8,5]
np.array(k).reshape(3,3)
a = np.array(k).reshape(3,3) + np.ones(3)
sum(a.sum(axis = 1))

aoa = ["설현","초아","지민","유나","유경","혜정","설현","민아","찬미"]
c = aoa[-7:-2]
c.pop()
c.pop()
c.append('밍꼬')
c.pop(0)
print(c)

a= np.arange(-2,22).reshape(4,3,2)
print(a[1,2,1])

a = [0,1,-3,5,4,9,-1,6,3]
b = np.array(a)
c = b.reshape(3,3)
d = c[1:,1:]
e = d.sum(axis=0)
print(e[1])

a_list = [1,4,-1,2,5,0,3]
a = a_list[:-1]
b = a_list[-6:]
y = 0 
for i, j in zip (a,b):
  y += i *j
print(y)

import numpy as np
Z = np.zeros((3,3),dtype='int')
Z[1:2,:2] = 1
Z[:2,1:2] = 1
print(np.sum(Z))

a = np.array([1,7,9])
b = np.array([8,6,0])
print(np.sum(a*b))

a = np.arange(0,9).reshape(3,3)
print(a)
print(a[0,0:2])

import math
myData = [int (math.pow(2,num)) for num in range (0,5) if num%2 != 0]
sum(myData)

list = [2,3,0,1,-3]
a = np.array(list[1:-1])
print(a[0])

def func(v1,v2=0,v3=0):
  result = 0
  result = v1 +v2+v3
  return result

func()

a_list = [10,20,30,40,50,60,70,80]
sum(a_list[1:5])

b = np.array([[1,2,3],[4,5,6]])
print(b[0,0])
print(b[0,1])
print(b[1,0])

for i in range(0,3):
  for j in range(0,3-i):
    print('',end = '')
  for j in range(0,i):
    print("*",end = '')
  print()

for i in range (10):
  print('정현아')

for i in range()