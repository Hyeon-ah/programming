# -*- coding: utf-8 -*-
"""(list_slicing)4주차_2021-09-27.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yfLJVqrAJx6POX8AaYNVAM3PmbZm69aN

## 리스트 Slice 연습
"""

colors = ['red', 'yellow', 'black', 'brown', 'white', 'purple']
print(type(colors)) # 자료형의 type
colors[2] # black만 출력

# 과제 1-1
colors = ['red', 'yellow', 'black', 'brown', 'white', 'purple']

# 1. slice 기능을 이용하여 black, brown, white 출력
print(colors[2:5])

# 과제 1-2
colors = ['red', 'yellow', 'black', 'brown', 'white', 'purple']
# 2. colors list의 모든 색을 for문을 이용해서 출력
for i in colors:
  print(i)

colors = ['red', 'yellow', 'black', 'brown', 'white', 'purple']
# purple만 출력
print(colors[5])
print(colors[-1]) # colors의 len을 모를 경우 유용.
print(colors[0:-2])

# 해보기1
colors = ['red', 'yellow', 'black', 'brown', 'white', 'purple']
startPos = 0 
colorLength = colors.__len__() # colorLength = len(colors)
for i in range(startPos, colorLength):
  print(colors[i:i+1]) # 자기만 계속 출력하는 것

# 해보기1 + my code
colors = ['red', 'yellow', 'black', 'brown', 'white', 'purple']
startPos = 0 
for i in range(startPos, len(colors)):
  print(colors[i:i+1])

# 해보기2-1
colors = ['red', 'yellow', 'black', 'brown', 'white', 'purple']
startPos = 0 
end_pos = len(colors)
div = 3
for i in range(startPos, end_pos + div , div):
  out = colors[startPos:startPos + div]
  if out != []:
    print(out)
  startPos = startPos + div

# 해보기2-2
colors = ['red', 'yellow', 'black', 'brown', 'white', 'purple']
startPos = 0 
end_pos = len(colors)
div = 2
for i in range(startPos, end_pos + div , div):
  out = colors[startPos:startPos + div]
  if out != []:
    print(out)
  startPos = startPos + div

# 해보기2-3
colors = ['red', 'yellow', 'black', 'brown', 'white', 'purple']
startPos = 0 
end_pos = len(colors)
div = 7
for i in range(startPos, end_pos + div , div):
  out = colors[startPos:startPos + div]
  if out != []:
    print(out)
  startPos = startPos + div

# 2차원 배열 슬라이싱_행 추출
list = [[1,2,3,4],[3,6,0,7],[-1,4,6,0]]
print(list[-1])
print(list[0:2])
print(list[1])

# 2차원 배열 슬라이싱_열 추출
b = [ ]
for i in list:
    b.append(i[0])
print(b) #[1, 3, -1]

# 과제2
# 3번째 열을 출력하는 코드를 for문을 사용해서 출력
list = [[1, 2, 3, 4], [3, 6, 0, 7], [-1, 4, 6, 0]]
t = []
for i in list:
  t.append(i[2])
print(t)

# 4번째열 출력_more simple way
list = [[1, 2, 3, 4], [3, 6, 0, 7], [-1, 4, 6, 0]]
b = [ i[3] for i in list ]
print(b)

# Numpy
# pip install numpy?
list = [[1, 2, 3, 4], [3, 6, 0, 7], [-1, 4, 6, 0]]
import numpy as np 
b = np.array(list).T[0]

univ = [['chosun', 'snu','yonsei'],['peking','Tsinghwa','Sanghai'],['Harvard', 'MIT','Stanford']]
# 3-1 한국 대학만 출력
print(univ[0])

# 3-2 미국 대학만 출력
print(univ[2])

# 3-3 각 지역에서 2위 대학만 
# 방법 1
t = [ ]
for i in univ:
  t.append(i[1])
print(t)

# 방법 2
t = [i[1] for i in univ]
print(t)

# 방법 3?
import numpy as np
t = np.array(univ).T[1]

"""## Numpy 맛보기"""

# 튜플에 하나의 요소만 있으면 문법상 콤마를 뒤에 붙인다. 
# numpy에서 배열은 동일한 타입의 값들을 가짐.
# 배열의 차원 = rank, 각 차원의 크기를 튜플로 표시하는 = shape.
# ex) 행이 2이고 열이 3인 2차원 배열에서 rank는 2 이고, shape는 (2, 3).
import numpy as np
xy = np.loadtxt('data-iris-1.csv', delimiter=',',dtype=np.float32)
print(xy)
x = xy[: , 0:-1] # 행은 전체, 열은 0부터 -2까지 추출
x = xy[:,[-1]] # 행은 전체, 열은 -1(제일 끝)만 추출
print(x)

#과제 있을 듯.

"""## 함수와 입출력"""

# return문이 없는 간단한 코드로 함수를 정의하고 호출
'''
def print_star():
  print('****************************************')
print_star()


def print_star10():
  print('****************************************')
  print('***************************')
  print('****************************************')
  print('****************************************')
  print('****************************************')
  print('****************************************')
  print('****************************************')
  print('****************************************')
  print('****************************************')
  print('****************************************')
print_star10()
'''

def print_star3():
  print('****************************************')
  print('****************************************')
  print('****************************************')
print_star3()
print_star3()
print_star3()

# 과제4
# 함수 정의
# 4-1 본인의 학교를 출력하는 함수
def school():
  print('조선대학교 글로벌인문대학')
# 4-2 본인의 학과를 출력하는 함수
def major():
  print('영어영문학과')
# 4-3 본인의 이름과 학번을 출력하는 함수 
def identity():
  print('정현아')
  print('20180191')
 
# 함수 호출
school()
major()
identity()