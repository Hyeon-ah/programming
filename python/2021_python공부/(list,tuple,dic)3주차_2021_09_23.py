# -*- coding: utf-8 -*-
"""(list,tuple,dic)3주차_2021-09-23.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14qRmTUMf-TcDim-QDUc0nNodJi5Z4YPJ

## list, tuple, dictionary

### 1. list
"""

score_list =[11,22,33]
# print(score_list[4]) # index 밖을 요청하면 에러
print(score_list[0])
print(score_list[1], score_list[2])

#빈 list 만드는 방법1
list1= list()
list1
#빈 list 만드는 방법2
list2= []
list2
#리스트 생성방법1
list3 = [1,2,3]
list3
#리스트 생성방법2
list3 = list((1,2,3))
list3

#range 활용해서 list생성
list3 = list(range(1,4))
list3

#문자열도 list
list4 =list('ABCEFG')
list4

#append()_mothod
list1= list((1,3,5,))
list1.append(7)
list1
list2= ["S","E","O","U"]
list2.append('L')
list2

#활용
b_list = ['a','b','c','a','b','a']
b_list.count('a')
b_list.count('b')
list1= ['a','b','c']
list1.extend(b_list)
list1
list1.insert(2,'k')
list1.remove('k')
list1 #['a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'a']
list1.pop()
list1 #['a', 'b', 'c', 'a', 'b', 'c', 'a', 'b']


#slice시작점과 끝나는 점의 index 기록해서 잘라내는 거
a_list = [10,20,30,40,50,60,70,80]
a_list[1:4]
a_list[0:1]
a_list[1:]
a_list[:5]
a_list[:]
a_list[-7:-2]
a_list[-7:]
a_list[-2:]
a_list[0:8:3]
a_list[::-1]

#list, dictionary 차이점
#list
list = [11, 22, 33, 44, 55]
list
list.pop(0)
list[0] #list에서는 index 가 재정렬됨

#dictionary
dic = {0:11, 1:22, 3:33, 4:44, 5:55}
dic
dic.pop(0)
dic
# dic[0] #dictionary에서는 index가 재정렬되지 않음.-> 오류.

#집합(set)
s = {100,100,200,200,300,400}
s
s.add(500)
s
s.discard(100)
s

s1 = {1,2,3,4,5,6}
s2 = {4,5,6,7,8,9}
#합집합
s1 | s2
#교집합
s1 & s2
#차집합
s1 - s2
#대칭 차집합
s1 ^ s2

"""# Practice _21-10-18"""

# list 만드는 방법
# list1 = list()  # empty list
# list2 = list[] # empty list
list3 = ['jeong',1,2,3,4,5] # ['jeong', 1, 2, 3, 4, 5]
list4 = list(("hyeon", 30, 40)) # ['hyeon', 30, 40]
list5 = list(range(0, 21, 5)) # [0, 5, 10, 15, 20]

# list 요소 삭제
# del 키워드 이용
del list5[1] # [0, 10, 15, 20]
# remove method 이용
list5.remove(20) # [0, 10, 15]
# 리스트 내장함수
min(list5)
max(list5)
sum(list5)
# 리스트 method
list6 = [55,48,78,1,5]
print(list6) # [55, 48, 78, 1, 5]
list6.sort()
print(list6) # [1, 5, 48, 55, 78]
list6.sort(reverse=True)
print(list6) # [78, 55, 48, 5, 1]

list3.append("ah")
list3

#활용 
b_list = ['a','b','c']
# b_list.count('a')
# b_list.count('b')
list6 = [20,33]


# list6.append(b_list) # [20, 33, ['a', 'b', 'c']]
list6.extend(b_list)  #[20, 33, 'a', 'b', 'c']
list6
list6.insert(2,'a') # 2번째 자리에 'a' 넣는다 # [20, 33, 'a', 'a', 'b', 'c']
list6.remove(20) #[33, 'a', 'a', 'b', 'c']

# pop()은 리스트의 맨 마지막 요소를 돌려주고 그 요소는 삭제한다.
list6.pop() # 'c'
list6 # [33, 'a', 'a', 'b']

"""## append는 x 그 자체를 원소로 넣고, extend는 iterable의 각 항목들을 넣음.
`list6.append(b_list) # [20, 33, ['a', 'b', 'c']]`
`list6.extend(b_list)  #[20, 33, 'a', 'b', 'c']`

## iterable이란: 
member를 하나씩 차례로 반환 가능한 object를 말한다. iterable 의 예로는 sequence type인 list, str, tuple 이 대표적이다. 
"""

#집합(set)
s = {100,100,200,200,300,400}
s # {100,100,200,200,300,400}
s.add(500) # {100, 200, 300, 400, 500}
s.discard(100) # {200, 300, 400, 500}

s1 = {1,2,3,4,5,6}
s2 = {4,5,6,7,8,9}
#합집합
s1 | s2 # {1, 2, 3, 4, 5, 6, 7, 8, 9}
#교집합
s1 & s2 # {4, 5, 6}
#차집합
s1 - s2 # {1, 2, 3}
#대칭 차집합
s1 ^ s2  # {1, 2, 3, 7, 8, 9}

"""# 정리
## set vs list/tuple
+ set(집합)은 dictionary와 비슷하게 중복을 허용하지 않는다. & 순서가 없다(Unordered) ==> 인덱싱 값 x, 정적
+ list나 tuple은 순서가 있다(Ordered), 동적(객체 지향적)
"""

s3 = set("HEllO")
s3 #{'E', 'H', 'O', 'l'}