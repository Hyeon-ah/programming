# -*- coding: utf-8 -*-
"""(객체지향)21-10-20_W8.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iJB-908gg-UO1bUbI8GsNdBOBQ6yuPlO
"""

animals = ['lion','tiger','cat','dog']
animals.sort()
animals

animals.sort(reverse=True)
animals

animals.reverse()
animals

animals.append('rabbit')
animals

s = animals.pop()
s

s.upper()

s.find('b')

"""## Cat class 정의 &  meow() method


"""

# Cat class 정의와 meow() method

class Cat:
  def meow(slef):
    print('야옹 야옹~~')

nabi = Cat()  
nabi.meow()
nero = Cat()
nero.meow()
mimi = Cat()
mimi.meow()

class Cat:
  def __init__(self, name, color='흰색'):
    self.name = name 
    self.color = color 
  def meow(self):
    print('내이름은 {}, 색깔은 {}, 야옹 야옹~~'.format(self.name, self.color))
  def __str__(self):
    return 'Cat(name = '+self.name+', color = '+self.color+')'

nabi = Cat('나비', '검정색') 
nero = Cat('네로', '흰색') 
mimi = Cat('미미', '갈색') 
nabi.meow()
nero.meow()
mimi.meow()

# __str__메소드와 print()함수 적용
print(nabi)

# 전체 SoccerPlayer 코드
# init 오타, 콤마/피어리어드 제대로 되었는지 확인 
class SoccerPlayer(object):
  def __init__(self, name, position, back_number):
    self.name = name
    self.position = position
    self.back_number = back_number
  def change_back_number(self, new_number):
    print("선수의 등 번호를 변경한다: From %d to %d" %(self.back_number, new_number))
    self.back_number = new_number
  def __str__(self):
    return "Hello, My name is %s. I play in %s in center." % (slef.name, self.position)

# SoccerPlayer를 사용하는 instance 코드
jinhyun = SoccerPlayer("Jinhyun", "MF", 10)
print("현재 선수의 등 번호는:", jinhyun.back_number)
jinhyun.change_back_number(50)
print("현재 선수의 변경된 등 번호는:", jinhyun.back_number)

"""## 이차원 리스트로 클래스, 인스턴스 생성"""

# data
names = ["Messi","Ramos","Ronaldo","Park","Buffon"]
positions = ["MF","DF","CF","WF","GK"]
numbers = [10, 4, 7, 13, 1]

# 이차원 리스트
players = [[names, positions, numbers] for name, position, number in zip(names, positions, numbers)]
# print(players)
# print(players[0])

# 전체 SoccerPlayer 코드
class SoccerPlayer(object):
  def __init__(self, name, position, back_number):
    self.name = name
    self.position = position
    self.back_number = back_number
  def change_back_number(self, new_number):
    print("선수의 등 번호를 변경한다: From %d to %d" %(self.back_number, new_number))
    self.back_number = new_number
  def __str__(self):
    return "Hello, My name is %s. I play in %s in center." % (self.name, self.position)

# 클래스 - 인스턴스
player_objects = [SoccerPlayer(name, position, number) for name, position, number in zip(names, positions, numbers)]
print(player_objects[0])


# __str__메소드와 print()함수 적용
Ah = SoccerPlayer("Hyeonah", "lab", 1)
print(Ah)

"""## 캡슐화
+ 값을 직접 할당
+ 캡슐화
+ 메소드와 변수를 외부에서 함부로 조작하는 것을 제한
+ 데이터를 보호
+ 우연히 값이 변경되는 것을 방지
"""

# nabi.age에 직접 값을 할당
class Cat:
  def __init__(self, name, age):
    self.name = name
    self.age = age
# Cat 객체의 문자열 표현방식
  def __str__(self):
    return 'Cat(name='+self.name+', age='+str(self.age)+')'

nabi = Cat('나비', 3) # nabi 인스턴스 생성
print(nabi)
nabi.age = 4
nabi.age = -5
print(nabi)

"""## 상속

"""

class Person(object):
  def __init__(self, name, age, gender):
    self.name = name
    self.age = age
    self.gende = gender  

  def about_me(self):
    print("My name is ", self.name, " and my age is  ", str(self.age), ".")

# 자식 클래스 만들어서 부모 클래스 상속
class Employee(Person):
  def __init__(self, name, age, gender, salary, hire_date):
    super().__init__(name, age, gender)
    self.salary = salary
    self.hire_date = hire_date

  def do_work(self):
    print("열심히 일을 한다.")

  def about_me(self):
    super().about_me()
    print("My salary is ", self.salary, " and 입사일은 ", self.hire_date, "입니다.")