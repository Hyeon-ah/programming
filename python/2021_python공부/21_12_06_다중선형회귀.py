# -*- coding: utf-8 -*-
"""21-12-06_다중선형회귀.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1siC1Xy15bYSVlv_myZqDcuJwJ_HwVSbL

# 다중 선형 회귀
## 가설, 비용함수, 옵티마이저 선언 후 경사 하강법 반복
"""

import torch
import torch.optim as optim
import matplotlib.pyplot as plt

x1_train = torch.FloatTensor([[73], [93], [89], [96],[73]])
x2_train = torch.FloatTensor([[80], [88], [91], [98],[66]])
x3_train = torch.FloatTensor([[75], [93], [90], [100], [70]])
y_train = torch.FloatTensor([[152], [185], [180],[196],[142]])
w1 = torch.zeros(1, requires_grad=True)
w2 = torch.zeros(1, requires_grad=True)
w3 = torch.zeros(1, requires_grad=True)
b = torch.zeros(1, requires_grad=True)

# optimizer 설정
optimizer = optim.SGD([w1, w2, w3, b], lr=1e-5)

nb_iteration = 1000
for i in range(nb_iteration + 1):
  # H(x) 계산
  hypothesis = x1_train * w1 + x2_train * w2 + x3_train * w3 + b
  # cost 계산
  cost = torch.mean((hypothesis - y_train) ** 2)
  # cost로 H(x) 개선
  optimizer.zero_grad()
  cost.backward()
  optimizer.step()

  #100번마다 로그 출력 # syntaxError
  if i % 100 == 0:
    print('Epoch {:4d}/{} w1: {:.3f} w2: {:.3f} w3: {:.3f} b: {:.3f} Cost: {:.6f}'.format(i, nb_iteration, w1.item(), w2.item(), w3.item(), b.item(), cost.item()))

# plt.figure(figsize=(10, 7))
# plt.plot(cost, "r")
# plt.xlabel("Iterations")
# plt.ylabel("Error")
# plt.show()

