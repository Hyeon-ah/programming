# -*- coding: utf-8 -*-
"""Ex1_k-nearest neighbor.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uGo_g4ocI2Nfcj83m3lXj_OCFH4Jy2Ey

## k-근접 이웃 (k-nearest neighbor, KNN) 

**입력, 결과가 있는 데이터들이 주어진 상황에서, 새로운 입력에 대한 결과를 추정할 때, <br>
결과를 아는 최근접한 k개의 데이터에 대한 결과정보를 이용하는 방법**

1. 데이터간의 거리 계산
2. 근접이웃 탐색 
3. 근접 이웃 k개로 부터 결과를 추정

### Libraries 불러오기 ###
"""

import numpy as np 
from matplotlib import pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')

"""### 데이터 생성 ###
- 랜덤 데이터 생성 
- 3개의 중심을 기준으로 정규 분포를 따르는 임의의 데이터 생성 
- 각 중심으로 생성된 데이터에 대해 Label 부여 
"""

center_1 = np.array([1,1])
center_2 = np.array([5,5])
center_3 = np.array([8,1])

data = np.random.randn(10,2) + center_1
data = np.concatenate((data, np.random.randn(10,2) + center_2))
data = np.concatenate((data, np.random.randn(10,2) + center_3))

cluster = np.ones(10)
cluster = np.concatenate((cluster, 2*np.ones(10)))
cluster = np.concatenate((cluster, 3*np.ones(10)))

sns.scatterplot(data[:,0], data[:, 1], hue=cluster)

"""### 새로운 데이터 입력 ###"""

data_new = [6, 5]
data_new = np.asarray(data_new)

sns.scatterplot(data[:,0], data[:, 1], hue=cluster)
plt.scatter(data_new[0], data_new[1], marker='*', c='r', s=100)

"""### 1. 데이터간의 거리 계산 ###"""

dist = []
for i in range(len(data)):
  dist.append(np.sqrt((data_new[0]-data[i,0])**2 + (data_new[1]- data[i,1])**2))

"""### 2. 근접이웃 탐색 ###"""

##

dist.sort()

##

"""### 3. 근접 이웃 k개로 부터 결과를 추정 ###"""

##